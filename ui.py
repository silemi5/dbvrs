import PySimpleGUI as sg
from tkinter import messagebox
import threading

import main as dbvrs

# Theme
sg.theme('TanBlue')

# Menubar
menuBar = [
    ['File', ['Validate a backup...', 'Restore from a backup...']],
    ['About']
]

# layout
welcomeLayout = [
    [ sg.Menu(menuBar)],
    [ sg.Text("Hello!") ],
    [ sg.Text("To begin to backup, press 'Start' to continue.") ],
    [ sg.Text("Otherwise, select a module to start in the menu.") ],
    [ sg.Button("Start"), sg.Exit() ],
]

validateLayout = [
    [ sg.Text("Please select a backup file generated by this program.") ],
    [ sg.Input(), sg.FileBrowse()],
    [ sg.Button("Validate"), sg.Cancel()]
]

restoreLayout = [
    [ sg.Text("Please select a backup file to restore.") ],
    [ sg.Input(), sg.FileBrowse() ],
    [ sg.Button("Next"), sg.Cancel() ],
]

# create window
window = sg.Window("Data backup, validation, and recovery system").Layout(welcomeLayout)

# GUI Loop
while True:
    event, values = window.Read()

    if event is None or event == 'Exit':
        break
    if event == "Start":
        window.Hide()
        backupLocation = sg.PopupGetFolder('Please select a folder to store your backups.') + "/"
        toBackup = sg.PopupGetFolder('Please select a folder to backup.') + "/"

        backupThread = threading.Thread(target=dbvrs.backup, args=(toBackup, backupLocation,))
        backupThread.start()

        while backupThread.is_alive():
            current = dbvrs.backupFileCount
            total = dbvrs.backupFilesTotal

            if(dbvrs.backupFileCount == 0):
                current = 0
            if(dbvrs.backupFilesTotal == 0):
                total = 1

            sg.OneLineProgressMeter('Backup progress', current, total, '__backupProgress__',"Backup in progress...",orientation='h',)

        if(dbvrs.status != 0):
            sg.OneLineProgressMeterCancel('__backupProgress__')
            messagebox.showerror(title="Error!", message=dbvrs.statusMessage)
            window.UnHide()
        else:
            sg.OneLineProgressMeter('Backup progress', total, total, '__backupProgress__',"Backup in progress...",orientation='h',)
            sg.PopupOK("Successfully backed up the specified folder!")
            window.UnHide()
        
    if event == "Validate a backup...":
        window.Hide()
        validateWindow = sg.Window("Validate a backup").Layout(validateLayout)
        while True:
            validateEvent, validateValues = validateWindow.Read()

            if validateEvent is None or validateEvent == "Exit":
                break
            if validateEvent == "Validate":
                validateArchive = validateValues[0]

                validateThread = threading.Thread(target=dbvrs.validate, args=(0, validateArchive))
                validateThread.start()

                while validateThread.is_alive():
                    current = dbvrs.validateFileCount
                    total = dbvrs.validateFilesTotal

                    if(dbvrs.validateFileCount == 0):
                        current = 0
                    if(dbvrs.validateFilesTotal == 0):
                        total = 1

                    sg.OneLineProgressMeter('Validating backup', current, total, '__validateProgress__',"Validating backup in progress...",orientation='h',)
                
                if(dbvrs.status != 0):
                    sg.OneLineProgressMeterCancel("__validateProcess__")
                    messagebox.showerror(title="Error!", message=dbvrs.statusMessage)
                else:
                    sg.OneLineProgressMeter('Validating backup', total, total, '__validateProgress__',"Validating backup in progress...",orientation='h',)
                    
                    # TODO: Validation results
                    sg.PopupOK("Successfully backed up the specified folder!")
                    window.UnHide()
                
                # sg.Popup(validateValues[0])
                # break
        break
    if event == "Restore from a backup...":
        window.Hide()
        restoreWindow = sg.Window("Restore from a backup").Layout(restoreLayout)

        while True:
            restoreEvent, restoreValues = restoreWindow.Read()

            if restoreEvent is None or restoreEvent == "Cancel":
                break
            if restoreEvent == "Next":
                backupFile = restoreValues[0]
                restoreWindow.Hide()
                restoreLocation = sg.PopupGetFolder('Please select a folder to restore your backups.')
                
                # TODO: Restore backup command
                restoreThread = threading.Thread(target=dbvrs.restore, args=(backupFile, restoreLocation))
                restoreThread.start()
# read window

window.close()
