import PySimpleGUI as sg
from tkinter import messagebox
import threading

import main as dbvrs

# Theme
sg.theme('TanBlue')

# Menubar
menuBar = [
    ['File', ['Validate a backup...', 'Restore from a backup...']],
    ['Help', ['About this program']]
]

# layout
welcomeLayout = None
validateLayout = None
restoreLayout = None

def initiateLayoutVariables():
    global welcomeLayout, validateLayout, restoreLayout

    welcomeLayout = [
        [ sg.Menu(menuBar)],
        [ sg.Text("Hello!") ],
        [ sg.Text("To begin to backup, press 'Start' to continue.") ],
        [ sg.Text("Otherwise, select a module to start in the menu.") ],
        [ sg.Button("Start"), sg.Exit() ],
    ]

    validateLayout = [
        [ sg.Text("Please select a backup file generated by this program.") ],
        [ sg.Input(), sg.FileBrowse(file_types=(("DBVRS generated archive", "*.zip"),))],
        [ sg.Button("Validate"), sg.Cancel()]
    ]

    restoreLayout = [
        [ sg.Text("Please select a backup file to restore.") ],
        [ sg.Input(), sg.FileBrowse(file_types=(("DBVRS generated archive", "*.zip"),)) ],
        [ sg.Button("Next"), sg.Cancel() ],
    ]

# create window
initiateLayoutVariables()
window = sg.Window("Data backup, validation, and recovery system").Layout(welcomeLayout)

# Event loop
while True:
    event, values = window.Read()

    if event is None or event == 'Exit':
        break
    
    # Backup module 
    if event == "Start":
        window.Hide()

        # Backup location
        backupLocation = ""
        while backupLocation == "":
            backupLocation = sg.PopupGetFolder('Please select a folder to store your backups.', 'Backup')

        # Empty backup location or clicked cancel
        if(backupLocation is None or not backupLocation):
            window.UnHide()
            continue

        # To backup location
        toBackup = ""
        while toBackup == "":
            toBackup = sg.PopupGetFolder('Please select a folder to backup.', 'Backup')

        # Empty to backup location or clicked cancel
        if(toBackup is None or not toBackup):
            window.UnHide()
            continue
        
        backupLocation += "/"
        toBackup += "/"
        backupThread = threading.Thread(target=dbvrs.backup, args=(toBackup, backupLocation,))
        backupThread.start()

        while backupThread.is_alive():
            current = dbvrs.backupFileCount
            total = dbvrs.backupFilesTotal

            if(dbvrs.backupFileCount == 0):
                current = 0
            if(dbvrs.backupFilesTotal == 0):
                total = 1

            sg.OneLineProgressMeter('Backup progress', current, total, '__backupProgress__',"Backup in progress...",orientation='h',)

        if(dbvrs.status != 0):
            sg.OneLineProgressMeterCancel('__backupProgress__')
            messagebox.showerror(title="Error!", message=dbvrs.statusMessage)
            window.UnHide()
        else:
            sg.OneLineProgressMeter('Backup progress', total, total, '__backupProgress__',"Backup in progress...",orientation='h',)
            sg.PopupOK("Successfully backed up the specified folder!")
            window.UnHide()
    
    # Validate module
    if event == "Validate a backup...":
        window.Hide()
        initiateLayoutVariables()
        validateWindow = sg.Window("Validate a backup").Layout(validateLayout)

        while True:
            validateEvent, validateValues = validateWindow.Read()

            if validateEvent is None or validateEvent == "Cancel":
                window.UnHide()
                validateWindow.close()
                break
            
            if validateEvent == "Validate":
                # Gets the file location of the archive.
                validateArchive = validateValues[0]

                if(validateArchive == ""):
                    continue

                # Creates a thread for validation
                validateThread = threading.Thread(target=dbvrs.validate, args=(0, validateArchive))
                validateThread.start()
                validateWindow.Hide()

                while validateThread.is_alive():
                    current = dbvrs.validateFileCount
                    total = dbvrs.validateFilesTotal

                    if(dbvrs.validateFileCount == 0):
                        current = 0
                    if(dbvrs.validateFilesTotal == 0):
                        total = 1

                    sg.OneLineProgressMeter('Validating backup', current, total, '__validateProgress__',"Validating backup in progress...",orientation='h',)
                
                if(dbvrs.status != 0):
                    sg.OneLineProgressMeter('Validating backup', total, total, '__validateProgress__',"Validating backup in progress...",orientation='h',)
                    sg.OneLineProgressMeterCancel("__validateProcess__")
                    messagebox.showerror(title="Error!", message=dbvrs.statusMessage)
                    window.UnHide()
                    break
                else:
                    sg.OneLineProgressMeter('Validating backup', total, total, '__validateProgress__',"Validating backup in progress...",orientation='h',)
                    
                    validationStatsOutput = "Validation results\n\nFiles in backup: {}\nExpected: {}\nMatched: {}\nUnlisted: {}\nHash value mismatched: {}\n\nMismatched files:\n{}\n\nUnlisted files:\n{}\n\n".format(
                        dbvrs.validationStats[0],
                        dbvrs.validationStats[1],
                        dbvrs.validationStats[2],
                        dbvrs.validationStats[3],
                        dbvrs.validationStats[4],
                        dbvrs.validationStats[5],
                        dbvrs.validationStats[6]
                    )
                    sg.PopupScrolled(validationStatsOutput, size=(50, 10))
                    window.UnHide()
                    break
    
    # Restore module
    if event == "Restore from a backup...":
        window.Hide()
        initiateLayoutVariables()
        restoreWindow = sg.Window("Restore from a backup").Layout(restoreLayout)

        while True:
            restoreEvent, restoreValues = restoreWindow.Read()

            if restoreEvent is None or restoreEvent == "Cancel":
                window.UnHide()
                restoreWindow.close()
                break

            if restoreEvent == "Next":
                backupFile = restoreValues[0]

                # Skip if empty
                if(backupFile == ""):
                    continue

                restoreWindow.Hide()

                restoreLocation = ""

                while restoreLocation == "":
                    restoreLocation = sg.PopupGetFolder('Please select a folder to restore your backups.')
                
                if (restoreLocation is None or restoreLocation == "Cancel" or restoreLocation == ""):
                    window.UnHide()
                    restoreWindow.close()
                
                # TODO: Restore backup command
                restoreThread = threading.Thread(target=dbvrs.restore, args=(backupFile, restoreLocation))
                restoreThread.start()
                
                while restoreThread.is_alive():
                    current = dbvrs.validateFileCount
                    total = dbvrs.validateFilesTotal

                    if(dbvrs.validateFileCount == 0):
                        current = 0
                    if(dbvrs.validateFilesTotal == 0):
                        total = 1
                    if(current == total):
                        current -= 1
                        sg.OneLineProgressMeter('Restoring backup', current, total, '__restoreProgress__',"Validation completed. Restoring.",orientation='h',)
                    else:
                        sg.OneLineProgressMeter('Restoring backup', current, total, '__restoreProgress__',"Validating backup in progress...",orientation='h',)
                    
                if(dbvrs.status != 0):
                    sg.OneLineProgressMeterCancel("__restoreProgress__")
                    messagebox.showerror(title="Error!", message=dbvrs.statusMessage)
                    window.UnHide()
                else:
                    sg.OneLineProgressMeter('Restoring backup', total, total, '__restoreProgress__',"Validating backup in progress...",orientation='h',)

                    validationStatsOutput = "Restoration results\n\nFiles in backup: {}\nExpected: {}\nMatched: {}\nUnlisted: {}\nHash value mismatched: {}\n\nNot restored files due to following:\nMismatched files:\n{}\n\nUnlisted files:\n{}\n\n".format(
                        dbvrs.validationStats[0],
                        dbvrs.validationStats[1],
                        dbvrs.validationStats[2],
                        dbvrs.validationStats[3],
                        dbvrs.validationStats[4],
                        dbvrs.validationStats[5],
                        dbvrs.validationStats[6],
                    )
                    sg.PopupScrolled(validationStatsOutput, size=(70, 10))
                    sg.Popup("Archive successfully restored!")
                    window.UnHide()
                    break

    # About screen
    if event == "About this program":
        aboutString = "Data backup, validation, and recovery system\n"
        aboutString += "In Partial Fulfillment of the Requirements for the CSIT 141 Capstone Project\n\n"
        aboutString += "Members:\nEmir Jo Jr.\nMoh. Alnaghil Teo\nSadik Mujaal"
        aboutString += "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThank you for the hard work!"
        sg.PopupScrolled(aboutString, size=(50, 10), auto_close=True)
# read window

window.close()
